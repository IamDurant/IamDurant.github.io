<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>kevin's blog</title><link>https://iamdurant.github.io</link><description>生存还是毁灭，这是一个值得考虑的问题</description><copyright>kevin's blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://assets.leetcode.cn/aliyun-lc-upload/users/tender-satoshino0/avatar_1692271843.png</url><title>avatar</title><link>https://iamdurant.github.io</link></image><lastBuildDate>Wed, 26 Jun 2024 19:39:38 +0000</lastBuildDate><managingEditor>kevin's blog</managingEditor><ttl>60</ttl><webMaster>kevin's blog</webMaster><item><title>排序算法</title><link>https://iamdurant.github.io/post/pai-xu-suan-fa.html</link><description>## 最基础的十大排序算法&#13;
&#13;
- 冒泡排序&#13;
- 选择排序&#13;
- 插入排序&#13;
- 希尔排序&#13;
- 堆排序&#13;
- 归并排序&#13;
- 快速排序&#13;
- 计数排序&#13;
- 桶排序&#13;
- 基数排序&#13;
&#13;
### 基于比较的排序算法，常见有：&#13;
&#13;
![各排序算法复杂度](https://github.com/iamdurant/iamdurant.github.io/assets/107034526/e9360d33-8b17-45d3-affe-1d0a7527914c)&#13;
&#13;
#### 冒泡排序&#13;
&#13;
重复遍历数组（每次遍历不断减少），每轮遍历不断比较并往后交换较大值，用一个变量记录最近的一次交换，可以减少交换次数， &#13;
在部分有序的情况下，可以减少交换次数。</description><guid isPermaLink="true">https://iamdurant.github.io/post/pai-xu-suan-fa.html</guid><pubDate>Tue, 25 Jun 2024 15:08:48 +0000</pubDate></item><item><title>基督山伯爵</title><link>https://iamdurant.github.io/post/ji-du-shan-bo-jue.html</link><description>#### 核心人物&#13;
- 法里亚（神甫）&#13;
- 埃德蒙·唐戴斯（主人公）&#13;
- 卡德鲁斯&#13;
- 梅赛苔丝（德·莫尔赛夫夫人）&#13;
- 费尔南（德·莫尔赛夫伯爵）&#13;
- 唐格拉尔&#13;
- 德·维尔福&#13;
- 莫雷尔&#13;
&#13;
#### 其他人物&#13;
- 雅各布（水手）&#13;
- 朱丽（莫雷尔之女）&#13;
- 马克西米利安·莫雷尔（莫雷尔之子）&#13;
- 埃马纽埃尔（正追求朱丽）&#13;
- 科克莱斯（莫雷尔公司出纳员）&#13;
- 佩纳隆（老水手）&#13;
- 戈玛尔（法老号船长）&#13;
- 阿尔贝·德·莫尔赛夫（子爵）&#13;
- 弗朗兹·德·埃皮奈（男爵）。</description><guid isPermaLink="true">https://iamdurant.github.io/post/ji-du-shan-bo-jue.html</guid><pubDate>Sun, 23 Jun 2024 10:21:46 +0000</pubDate></item><item><title>哈希表</title><link>https://iamdurant.github.io/post/ha-xi-biao.html</link><description>#### 底层数据结构&#13;
&#13;
哈希表底层数据结构为数组＋链表 或者 数组+红黑树。</description><guid isPermaLink="true">https://iamdurant.github.io/post/ha-xi-biao.html</guid><pubDate>Sat, 22 Jun 2024 05:31:16 +0000</pubDate></item><item><title>初识B树</title><link>https://iamdurant.github.io/post/chu-shi-B-shu.html</link><description>### B树&#13;
&#13;
B树（B-Tree）是一种自平衡的树数据结构，它在维护排序数据的同时，支持高效的插入、删除和查找操作。</description><guid isPermaLink="true">https://iamdurant.github.io/post/chu-shi-B-shu.html</guid><pubDate>Thu, 20 Jun 2024 13:04:19 +0000</pubDate></item><item><title>重识yaml</title><link>https://iamdurant.github.io/post/zhong-shi-yaml.html</link><description>### spring将yaml格式作为配置文件格式，必须得好好熟悉一下&#13;
&#13;
### 基本语法&#13;
&#13;
- 大小写敏感&#13;
- 使用缩进表示层级关系&#13;
- 缩进值允许使用空格，不允许使用tab&#13;
- 缩进的空格数不重要，只要保证相同层级的左对齐即可&#13;
- 使用`#`表示注释&#13;
&#13;
### yaml对象&#13;
&#13;
以键值对的方式表示 中间用`: `分隔key &amp; value，`:`号后面带**一个**空格&#13;
&#13;
```yaml&#13;
key: &#13;
  value1&#13;
  value2&#13;
```&#13;
&#13;
### yaml数组&#13;
&#13;
yaml数组用`- `号开头，`:`号后面带**一个**空格&#13;
&#13;
```yaml&#13;
arr: &#13;
 - a&#13;
 - b&#13;
 - c&#13;
```&#13;
&#13;
也可以表示多维数组，需控制层级&#13;
&#13;
```yaml&#13;
array: &#13;
  -&#13;
    - a&#13;
    - b&#13;
    - c&#13;
  -&#13;
    - x&#13;
    - y&#13;
    - z&#13;
```&#13;
&#13;
对象数组，就像java中的`Person p1 = new Person('薛大炮', 18);Person p2 = new Person('蔡徐坤', 26);Person[] persons = new Person[]{p1, p2};`&#13;
&#13;
```yaml&#13;
persons&#13;
  -&#13;
    name: 薛大炮&#13;
    age: 18&#13;
  -&#13;
    name: 蔡徐坤&#13;
    age: 26&#13;
```&#13;
&#13;
### 复合结构&#13;
&#13;
对象和数组可以构成复杂的结构关系&#13;
&#13;
```yaml&#13;
languages: &#13;
  - Java&#13;
  - C++&#13;
  - Go&#13;
WebSites: &#13;
  baidu: https://www.baidu.com&#13;
  google: https:www.google.com&#13;
  bing: https:www.bing.com&#13;
```&#13;
&#13;
对应到json为&#13;
&#13;
```json&#13;
{&#13;
  'languages': ['Java', 'C++', 'Go'],&#13;
  'WebSites': {&#13;
    'baidu': 'https://www.baidu.com',&#13;
    'google': 'https:www.google.com',&#13;
    'bing': 'https:www.bing.com'&#13;
  }&#13;
}&#13;
```&#13;
&#13;
### 纯量&#13;
&#13;
纯量是最基本的，不可再分的值&#13;
- 字符串&#13;
- 整数&#13;
- 浮点数&#13;
- 布尔值&#13;
- null&#13;
- 时间（date）&#13;
- 日期（datetime）&#13;
&#13;
以一个例子来看各纯量的使用&#13;
&#13;
```yaml&#13;
string: &#13;
  - 哈哈            # 字符串可直接写&#13;
  - 'good'         # 或者单引号引表示&#13;
  - '西海岸'        # 或者双引号表示&#13;
  - you jump       # 字符串可写多行，每行被转化为空格即为` you jump i jump！`&#13;
    i jump！&#13;
&#13;
int: &#13;
  - 123&#13;
  - 0100_1101     # 二进制表示&#13;
 &#13;
float: &#13;
  - 66.6&#13;
  - 45.1231402+e5      # 可以使用科学计数法表示&#13;
&#13;
boolean: &#13;
  - TRUE&#13;
  - FALSE&#13;
  - True&#13;
  - False&#13;
  - true&#13;
  - false        # 其实 true false 全小写最常用&#13;
&#13;
null: &#13;
  - a&#13;
  - ~            # 使用~表示null&#13;
&#13;
date: 2024-06-20       # 使用ISO-8601标准：yyyy-MM-dd&#13;
&#13;
datetime: 2024-06-20T16:34:20+09:00     # 使用ISO-8601标准：yyyy-MM-ddTHH:mm:ss+时区&#13;
```&#13;
&#13;
### 引用&#13;
&#13;
`&amp;`表示锚点，`*`表示引用锚点，`&lt;&lt;: `表示合并到当前数据流&#13;
&#13;
```yaml&#13;
database: &amp;database&#13;
  host: 127.0.0.1&#13;
  port: 3306&#13;
  user: root&#13;
  password: 123456&#13;
&#13;
mysql: &#13;
  &lt;&lt;: *database             # 若未生效 则mardown解析器不兼容&#13;
```&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://iamdurant.github.io/post/zhong-shi-yaml.html</guid><pubDate>Thu, 20 Jun 2024 08:45:56 +0000</pubDate></item><item><title>初窥markdown</title><link>https://iamdurant.github.io/post/chu-kui-markdown.html</link><description>### 首先呢，要学会markdown语法，markdown语法非常强大，实在是太酷了，迫不及待要看一看它的语法了！！&#13;
&#13;
### 标题&#13;
&#13;
就标题来说只需在文字前面加上（# ），是的，一个#号加一个空格，后面再跟上标题即可，#号越多 标题越小&#13;
&#13;
### 引用&#13;
&#13;
&gt; 只需在文本开头前加上`&gt; `即可（后面带空格）&#13;
&#13;
### 粗体、斜体、粗体斜体&#13;
&#13;
这是斜体 *哈哈哈哈*  文本块前后各加一个星号&#13;
这是加粗 **呵呵呵呵** 文本块前后各加两个星号&#13;
这是斜体与加粗 ***嘻嘻嘻嘻*** 文本块前后各加三个星号&#13;
&#13;
### 无序列表&#13;
&#13;
无序列表的使用也是相当清晰，就像yaml的数组一样，当然了，控制层级的话只需在前面控制空格数量就好了&#13;
- 苹果&#13;
- 香蕉&#13;
- 蔬菜&#13;
  - 青菜&#13;
  - 白菜&#13;
&#13;
### 有序列表&#13;
&#13;
有序列表只需在数字或者符号后加上`. `即可（后面有空格）,&#13;
1. 科比&#13;
2. 杜兰特&#13;
3. 乔丹&#13;
&#13;
### 链接&#13;
&#13;
链接的格式：`[]()` 方括号里面是文字 圆括号里面是连接地址&#13;
比如：[来吧，now，is movie time！！！](https://nunflix.com)&#13;
&#13;
### 图片&#13;
&#13;
哇哇哇哦，图片就比较刺激了，格式：`![]()`，基于连接，由感叹号开头，方括号里面是文字(在这里是图片描述) 圆括号里面是连接地址&#13;
比如：&#13;
![我的leetcode头像](https://assets.leetcode.cn/aliyun-lc-upload/users/tender-satoshino0/avatar_1692271843.png)&#13;
&#13;
### 分割线&#13;
&#13;
格式：`---` 就是三个减号 三个减号上面还需空一行&#13;
&#13;
---&#13;
&#13;
### 表格&#13;
&#13;
表格就更有意思了，太new了，太潮流了&#13;
&#13;
格式：`|`用来分割，第二行的`:` 用来代表左对齐还是右对齐，或者中间对齐&#13;
&#13;
![表格格式](https://github.com/iamdurant/iamdurant.github.io/assets/107034526/5410dc3a-1e97-426e-b8b5-a629ca4f25d6)&#13;
&#13;
&#13;
| 学号 | 姓名 | 年龄 |&#13;
|     :----------     |    :---     |     :--    |&#13;
|     2020132238     |      蔡徐坤   |      23   |&#13;
|     2020132221     |     薛大炮    |    24     |&#13;
|     2020132249    |     洲饱饱    |      23   |&#13;
&#13;
**上述有我的idol 以及我的两个brother，能被我写进blog，是我的brother的福气**&#13;
&#13;
### 脚注&#13;
&#13;
脚注就比较叼了格式也是基于链接：`[](脚注解释 '脚注名字')`&#13;
&#13;
- [全栈工程师](全栈工程师就是。</description><guid isPermaLink="true">https://iamdurant.github.io/post/chu-kui-markdown.html</guid><pubDate>Wed, 19 Jun 2024 17:43:00 +0000</pubDate></item></channel></rss>