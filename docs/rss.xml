<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>kevin's blog</title><link>https://iamdurant.github.io</link><description>生存还是毁灭，这是一个值得考虑的问题</description><copyright>kevin's blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://assets.leetcode.cn/aliyun-lc-upload/users/tender-satoshino0/avatar_1692271843.png</url><title>avatar</title><link>https://iamdurant.github.io</link></image><lastBuildDate>Sat, 14 Sep 2024 14:31:58 +0000</lastBuildDate><managingEditor>kevin's blog</managingEditor><ttl>60</ttl><webMaster>kevin's blog</webMaster><item><title>差分数组</title><link>https://iamdurant.github.io/post/cha-fen-shu-zu.html</link><guid isPermaLink="true">https://iamdurant.github.io/post/cha-fen-shu-zu.html</guid><pubDate>Sat, 14 Sep 2024 14:31:36 +0000</pubDate></item><item><title>二维前缀和</title><link>https://iamdurant.github.io/post/er-wei-qian-zhui-he.html</link><description>求矩阵的子矩阵和&#13;
- 方法一：对矩阵的每一行做前缀和，求子矩阵元素和时还需要遍历每一行，并不能做到O(1)的查询时间&#13;
&#13;
- 方法二：预处理二维矩阵前缀和，将每次查询优化到O(1)&#13;
![原理图](https://pic.leetcode.cn/1692152740-dSPisw-matrix-sum.png)。</description><guid isPermaLink="true">https://iamdurant.github.io/post/er-wei-qian-zhui-he.html</guid><pubDate>Fri, 13 Sep 2024 13:52:47 +0000</pubDate></item><item><title>位运算</title><link>https://iamdurant.github.io/post/wei-yun-suan.html</link><description>#### n &amp; n - 1&#13;
`n &amp; n - 1`  n减去最低位的2的幂&#13;
&#13;
#### n &amp; -n&#13;
`n &amp; -n`  获取组成n的二进制中的最低位的2的幂。</description><guid isPermaLink="true">https://iamdurant.github.io/post/wei-yun-suan.html</guid><pubDate>Fri, 13 Sep 2024 11:37:36 +0000</pubDate></item><item><title>快速幂</title><link>https://iamdurant.github.io/post/kuai-su-mi.html</link><description>#### 快速幂实现&#13;
&#13;
- 时间复杂度：O(logn)&#13;
- 空间复杂度：O(logn) 栈的开销&#13;
&#13;
```java&#13;
private int fastPow(int val, int p) {&#13;
        if(p == 0) return 1;&#13;
        if(p == 1) return val;&#13;
&#13;
        int half = fastPow(val, p &gt;&gt; 1);&#13;
        int result;&#13;
        if((p &amp; 1) == 0) result = half * half;&#13;
        else result = half * half * val;&#13;
&#13;
        return result;&#13;
    }&#13;
```。</description><guid isPermaLink="true">https://iamdurant.github.io/post/kuai-su-mi.html</guid><pubDate>Tue, 10 Sep 2024 16:15:51 +0000</pubDate></item><item><title>设计模式</title><link>https://iamdurant.github.io/post/she-ji-mo-shi.html</link><guid isPermaLink="true">https://iamdurant.github.io/post/she-ji-mo-shi.html</guid><pubDate>Sat, 13 Jul 2024 16:13:53 +0000</pubDate></item><item><title>dubbo</title><link>https://iamdurant.github.io/post/dubbo.html</link><guid isPermaLink="true">https://iamdurant.github.io/post/dubbo.html</guid><pubDate>Fri, 12 Jul 2024 04:02:50 +0000</pubDate></item><item><title>Mysql</title><link>https://iamdurant.github.io/post/Mysql.html</link><description>**行记录格式**&#13;
- antelope&#13;
  - redundant&#13;
  - compact&#13;
- barracuda&#13;
    - dynamic&#13;
    - compressed&#13;
&#13;
**compact**&#13;
可变长字段长度(1或2个byte)    NULL值(bitmap)    头部(5个byte)&#13;
&#13;
**三个隐藏字段**&#13;
- ROWID(6 byte)，在没有指定primary key时才存在&#13;
- 事务ID(6 byte)&#13;
- 回滚指针(7 byte)&#13;
&#13;
**buffer pool**&#13;
由控制块与缓存页组成&#13;
&#13;
Hash&#13;
```text&#13;
由表空间及页号组成key，控制块引用为value，O(1)的时间判断要查询的数据是否位于buffer pool&#13;
```&#13;
&#13;
各链表及其作用&#13;
- free链&#13;
```text&#13;
双向链表，节点存储缓存页等信息&#13;
```&#13;
- Flush链&#13;
```text&#13;
双向链表，节点存储缓存页等信息，当数据被更新时，被标记为dirty page，相应的控制块加入flush链，由后台线程异步刷盘&#13;
```&#13;
- LRU链&#13;
```text&#13;
双向链表，节点存储缓存页等信息，分为young数据区、old 数据区，当buffer pool满时，淘汰数据&#13;
```。</description><guid isPermaLink="true">https://iamdurant.github.io/post/Mysql.html</guid><pubDate>Fri, 12 Jul 2024 04:02:07 +0000</pubDate></item><item><title>RocketMQ</title><link>https://iamdurant.github.io/post/RocketMQ.html</link><guid isPermaLink="true">https://iamdurant.github.io/post/RocketMQ.html</guid><pubDate>Fri, 12 Jul 2024 04:01:49 +0000</pubDate></item><item><title>maven</title><link>https://iamdurant.github.io/post/maven.html</link><description>maven的本质是一个项目管理工具，将项目开发和管理抽象成一个项目对象模型（POM）&#13;
POM（Project Object Model）：项目对象模型&#13;
&#13;
**仓库类型**&#13;
- 本地仓库&#13;
- 私服&#13;
- 中央仓库&#13;
&#13;
**坐标**&#13;
- groupId&#13;
- artifactId&#13;
- version&#13;
&#13;
**command**&#13;
- mvn clean&#13;
- mvn compile&#13;
- mvn test&#13;
- mvn package&#13;
- mvn install&#13;
&#13;
**依赖传递性**&#13;
- 直接依赖：直接通过依赖配置建立的依赖关系&#13;
- 间接依赖：被依赖的资源的依赖&#13;
&#13;
**依赖传递冲突问题**&#13;
- 路劲优先：当依赖中出现冲突，层级越深，优先级越低&#13;
- 声明优先：当冲突层级相同，root先声明优先级高&#13;
&#13;
**依赖范围**&#13;
- compile 默认&#13;
- provided 源码 测试&#13;
- test 测试&#13;
- runtime 打包&#13;
&#13;
**模块聚合**&#13;
```xml&#13;
&lt;packaging&gt;pom&lt;/packaging&gt;&#13;
&lt;modules&gt;&#13;
    &lt;module&gt;&lt;/module&gt;&#13;
    &lt;module&gt;&lt;/module&gt;&#13;
&lt;/modules&gt;&#13;
```&#13;
&#13;
**自定义属性**&#13;
```xml&#13;
&lt;properties&gt;&#13;
    &lt;spring.web.version&gt;&lt;/spring.web.version&gt;&#13;
    &lt;redis.version&gt;&lt;/redis.version&gt;&#13;
&lt;/properties&gt;&#13;
```&#13;
&#13;
**pom属性解析到配置文件**&#13;
```xml&#13;
&lt;resources&gt;&#13;
    &lt;resource&gt;&#13;
        &lt;directory&gt;配置文件目录&lt;/directory&gt;&#13;
        &lt;filtering&gt;true&lt;/filtering&gt;&#13;
    &lt;resource&gt;&#13;
&lt;/resources&gt;&#13;
```&#13;
&#13;
**跳过测试**&#13;
```text&#13;
mvn package -D skipTests&#13;
```。</description><guid isPermaLink="true">https://iamdurant.github.io/post/maven.html</guid><pubDate>Fri, 12 Jul 2024 02:12:03 +0000</pubDate></item><item><title>spring-boot-data-elasticsearch</title><link>https://iamdurant.github.io/post/spring-boot-data-elasticsearch.html</link><description>##### spring-boot-data-elasticsearch&#13;
**依赖**&#13;
```xml&#13;
&lt;dependency&gt;&#13;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#13;
    &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;&#13;
    &lt;version&gt;2.7.6&lt;/version&gt;&#13;
&lt;/dependency&gt;&#13;
```&#13;
&#13;
**annotation**&#13;
```java&#13;
@Repository&#13;
@EnableElasticSearchRepositories(basePackage = '')&#13;
@Document(indexName = ''， createIndex = true)  标注实体类&#13;
@Id  标注主键&#13;
@Field(type = FieldType.Text, analyzer = 'ik_max_word')  声明字段类型以及其他信息&#13;
```&#13;
&#13;
**interface**&#13;
```java&#13;
@Repository&#13;
public interface EsSubjectRepo extends ElasticsearchRepository&lt;EsSubjectInfo, Long&gt; {&#13;
&#13;
}&#13;
```&#13;
&#13;
**代码demo**&#13;
```java&#13;
@Service&#13;
public class EsSubjectInfoServiceImpl implements EsSubjectInfoService {&#13;
    @Resource&#13;
    private EsSubjectRepo repo;&#13;
&#13;
    @Resource&#13;
    private ElasticsearchRestTemplate restTemplate;&#13;
&#13;
    @Override&#13;
    public void createIndex() {&#13;
        IndexOperations indexOps = restTemplate.indexOps(SubjectInfoEs.class);&#13;
        indexOps.create();&#13;
        Document mapping = indexOps.createMapping(SubjectInfoEs.class);&#13;
        indexOps.putMapping(mapping);&#13;
    }&#13;
&#13;
    @Override&#13;
    public void addDocs() {&#13;
        List&lt;SubjectInfoEs&gt; subjectInfoEs = List.of(&#13;
                new SubjectInfoEs(1L, 'mysql是什么', 'mysql是关系型数据库', 'wwb', new Date()),&#13;
                new SubjectInfoEs(2L, 'redis是什么', 'redis是基于内存的键值对型数据库', 'wwb', new Date()),&#13;
                new SubjectInfoEs(3L, 'es是什么', 'es是搜索引擎', 'wwb', new Date()));&#13;
&#13;
        repo.saveAll(subjectInfoEs);&#13;
    }&#13;
&#13;
    @Override&#13;
    public void find() {&#13;
        Iterable&lt;SubjectInfoEs&gt; all = repo.findAll();&#13;
        for (SubjectInfoEs subjectInfoEs : all) {&#13;
            System.out.println(subjectInfoEs);&#13;
        }&#13;
    }&#13;
&#13;
    @Override&#13;
    public void search() {&#13;
        NativeSearchQuery query = new NativeSearchQueryBuilder()&#13;
                .withQuery(QueryBuilders.matchQuery('createUser', 'wwb'))&#13;
                .build();&#13;
&#13;
        SearchHits&lt;SubjectInfoEs&gt; searched = restTemplate.search(query, SubjectInfoEs.class);&#13;
&#13;
        Iterator&lt;SearchHit&lt;SubjectInfoEs&gt;&gt; iterator = searched.stream().iterator();&#13;
        while (iterator.hasNext()) {&#13;
            SearchHit&lt;SubjectInfoEs&gt; next = iterator.next();&#13;
            SubjectInfoEs content = next.getContent();&#13;
            System.out.println(content.getSubjectName());&#13;
        }&#13;
    }&#13;
}&#13;
```。</description><guid isPermaLink="true">https://iamdurant.github.io/post/spring-boot-data-elasticsearch.html</guid><pubDate>Mon, 08 Jul 2024 19:55:42 +0000</pubDate></item><item><title>git</title><link>https://iamdurant.github.io/post/git.html</link><description>### 概念图&#13;
![image](https://github.com/iamdurant/iamdurant.github.io/assets/107034526/54916701-a7d3-4c9a-b465-b69d0be73426)&#13;
&#13;
![image](https://github.com/iamdurant/iamdurant.github.io/assets/107034526/a25ae0ec-eea1-4aa8-b86c-b9bae5f8d9af)&#13;
&#13;
### 基础&#13;
&#13;
#### 设置用户信息&#13;
`git config --global user.email '123@bbq.com'`&#13;
`git config --global user.name 'kevin'`&#13;
&#13;
#### git log&#13;
`alias gl='git log --pretty=oneline --all --graph --abbrev-commit'`&#13;
`git reflog`&#13;
&#13;
#### 初始化仓库&#13;
`git init`&#13;
&#13;
#### staged&#13;
`git add &lt;file&gt;...`&#13;
&#13;
#### 查看状态&#13;
`git status`&#13;
&#13;
#### 提交&#13;
`git commit -m '提交描述信息'`&#13;
&#13;
#### 版本回退&#13;
`git reset --hard commitID`&#13;
&#13;
#### .gitignore&#13;
```text&#13;
.gitignore&#13;
*.class&#13;
*.iml&#13;
*.idea&#13;
```&#13;
&#13;
### 分支相关&#13;
&#13;
#### 查看分支&#13;
`git branch`&#13;
&#13;
#### 创建分支&#13;
`git branch &lt;branch_name&gt;`&#13;
&#13;
#### 删除分支&#13;
`git branch -d &lt;branch_name&gt;`&#13;
`git branch -D &lt;branch_name&gt;` *强制删除*&#13;
&#13;
#### 切换分支&#13;
```text&#13;
git checkout &lt;branch_name&gt;&#13;
git switch &lt;branch_name&gt;&#13;
```&#13;
&#13;
#### 创建并切换分支&#13;
`git checkout -b &lt;branch_name&gt;`&#13;
&#13;
#### 合并分支&#13;
`git merge &lt;be_merge_branch_name&gt;`&#13;
&#13;
#### 通用分支使用图&#13;
![image](https://github.com/iamdurant/iamdurant.github.io/assets/107034526/f0a1c210-5152-4ac9-a989-1e42fa39a0f8)&#13;
&#13;
### 远程仓库相关&#13;
&#13;
#### 关联仓库&#13;
`git remote add &lt;name&gt; &lt;git_url&gt;`&#13;
&#13;
#### 关联分支&#13;
```text&#13;
git branch --set-upstream=&lt;remote_repository_name&gt;/&lt;remote_branch_name&gt; &lt;current_branch_name&gt;&#13;
```&#13;
&#13;
#### 查看关联仓库&#13;
`git remote`&#13;
&#13;
#### 关联分支&#13;
`git push --set-upstream`&#13;
&#13;
#### 推送代码&#13;
`git push &lt;remote_repository_name&gt; &lt;local_branch&gt;:&lt;remote_branch&gt;`&#13;
&#13;
#### 拉代码&#13;
```text&#13;
git fetch &lt;repository_name&gt; &lt;branch_name&gt;     抓取分支，不合并，若不指定branch，则抓取所有branch&#13;
git pull &lt;repository_name&gt; &lt;branch_name&gt;       拉取分支，合并，若不指定branch，则拉取所有分支&#13;
```&#13;
。</description><guid isPermaLink="true">https://iamdurant.github.io/post/git.html</guid><pubDate>Mon, 08 Jul 2024 01:01:56 +0000</pubDate></item><item><title>编译redis、mysql、nginx</title><link>https://iamdurant.github.io/post/bian-yi-redis%E3%80%81mysql%E3%80%81nginx.html</link><description>#### 环境&#13;
设备：redmi6 android linux-deploy chroot&#13;
架构：arm32&#13;
无法使用systemctl，无法使用docker部署应用，应用的预编译版本都为64位，无法使用&#13;
&#13;
#### 编译redis&#13;
版本：7.0.15&#13;
前置依赖：build-essential tcl&#13;
准备好源代码&#13;
&#13;
1. make -j6&#13;
2. make PREFIX=/tmp/redis install&#13;
&#13;
耗时：10分钟&#13;
&#13;
#### 编译mysql&#13;
版本：8.0.38&#13;
前置依赖：build-essential cmake libncurses5-dev libssl-dev bison libaio-dev&#13;
准备好源代码&#13;
&#13;
1. mkdir build &amp;&amp; cd build&#13;
2. cmake .. -DDOWNLOAD_BOOST=1 -DWITH_BOOST=boost `此步骤可能提示cmake版本过低，若apt存在最低要求的版本最好，直接安装，否则准备需要cmake源码，编译安装cmake：1. apt remove cmake 2. ./bootstrap 3. make -j6 4. make install 5. echo 'export PATH=/usr/local/bin:$PATH' &gt;&gt; ~/.bashrc 7. source ~/.bashrc`&#13;
4. make -j8&#13;
5. make install DESTDIR=/tmp/mysql&#13;
&#13;
耗时：将近6小时&#13;
与此[博主](https://cloud.tencent.com/developer/article/1799089)的耗时差不多（刚开始我还以为mysql也不至于编译那么久）&#13;
&#13;
**意外情况：编译到73%频繁死机，检查后，内存不足，利用scene4增大了2GB的swap后，得以继续编译**&#13;
&#13;
#### mysql编译完成测试：&#13;
1. `groupadd mysql  **not use**`&#13;
2. `useradd mysql -r -g mysql -s /bin/false mysql **not use**`&#13;
3. `./mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data`&#13;
4. `./mysqld_safe --user=root &amp;`。</description><guid isPermaLink="true">https://iamdurant.github.io/post/bian-yi-redis%E3%80%81mysql%E3%80%81nginx.html</guid><pubDate>Sun, 07 Jul 2024 06:29:43 +0000</pubDate></item><item><title>图</title><link>https://iamdurant.github.io/post/tu.html</link><description>### 图&#13;
&#13;
图由vertext以及edge组成，分为有向图和无向图。</description><guid isPermaLink="true">https://iamdurant.github.io/post/tu.html</guid><pubDate>Thu, 27 Jun 2024 11:40:05 +0000</pubDate></item><item><title>排序算法</title><link>https://iamdurant.github.io/post/pai-xu-suan-fa.html</link><description>## 最基础的十大排序算法&#13;
&#13;
- 冒泡排序&#13;
- 选择排序&#13;
- 插入排序&#13;
- 希尔排序&#13;
- 堆排序&#13;
- 归并排序&#13;
- 快速排序&#13;
- 计数排序&#13;
- 桶排序&#13;
- 基数排序&#13;
&#13;
### 基于比较的排序算法，常见有：&#13;
&#13;
![各排序算法复杂度](https://github.com/iamdurant/iamdurant.github.io/assets/107034526/e9360d33-8b17-45d3-affe-1d0a7527914c)&#13;
&#13;
#### 冒泡排序&#13;
&#13;
重复遍历数组（每次遍历不断减少），每轮遍历不断比较并往后交换较大值，用一个变量记录最近的一次交换，可以减少交换次数， &#13;
在部分有序的情况下，可以减少交换次数。</description><guid isPermaLink="true">https://iamdurant.github.io/post/pai-xu-suan-fa.html</guid><pubDate>Tue, 25 Jun 2024 15:08:48 +0000</pubDate></item><item><title>基督山伯爵</title><link>https://iamdurant.github.io/post/ji-du-shan-bo-jue.html</link><description>#### 核心人物&#13;
- 法里亚（神甫）&#13;
- 埃德蒙·唐戴斯（主人公）&#13;
- 卡德鲁斯&#13;
- 梅赛苔丝（德·莫尔赛夫夫人）&#13;
- 费尔南（德·莫尔赛夫伯爵）&#13;
- 唐格拉尔&#13;
- 德·维尔福&#13;
- 莫雷尔&#13;
&#13;
#### 其他人物&#13;
- 雅各布（水手）&#13;
- 朱丽（莫雷尔之女）&#13;
- 马克西米利安·莫雷尔（莫雷尔之子）&#13;
- 埃马纽埃尔（正追求朱丽）&#13;
- 科克莱斯（莫雷尔公司出纳员）&#13;
- 佩纳隆（老水手）&#13;
- 戈玛尔（法老号船长）&#13;
- 阿尔贝·德·莫尔赛夫（子爵）&#13;
- 弗朗兹·德·埃皮奈（男爵）。</description><guid isPermaLink="true">https://iamdurant.github.io/post/ji-du-shan-bo-jue.html</guid><pubDate>Sun, 23 Jun 2024 10:21:46 +0000</pubDate></item><item><title>哈希表</title><link>https://iamdurant.github.io/post/ha-xi-biao.html</link><description>#### 底层数据结构&#13;
&#13;
哈希表底层数据结构为数组＋链表 或者 数组+红黑树。</description><guid isPermaLink="true">https://iamdurant.github.io/post/ha-xi-biao.html</guid><pubDate>Sat, 22 Jun 2024 05:31:16 +0000</pubDate></item><item><title>初识B树</title><link>https://iamdurant.github.io/post/chu-shi-B-shu.html</link><description>### B树&#13;
&#13;
B树（B-Tree）是一种自平衡的树数据结构，它在维护排序数据的同时，支持高效的插入、删除和查找操作。</description><guid isPermaLink="true">https://iamdurant.github.io/post/chu-shi-B-shu.html</guid><pubDate>Thu, 20 Jun 2024 13:04:19 +0000</pubDate></item><item><title>重识yaml</title><link>https://iamdurant.github.io/post/zhong-shi-yaml.html</link><description>### spring将yaml格式作为配置文件格式，必须得好好熟悉一下&#13;
&#13;
### 基本语法&#13;
&#13;
- 大小写敏感&#13;
- 使用缩进表示层级关系&#13;
- 缩进值允许使用空格，不允许使用tab&#13;
- 缩进的空格数不重要，只要保证相同层级的左对齐即可&#13;
- 使用`#`表示注释&#13;
&#13;
### yaml对象&#13;
&#13;
以键值对的方式表示 中间用`: `分隔key &amp; value，`:`号后面带**一个**空格&#13;
&#13;
```yaml&#13;
key: &#13;
  value1&#13;
  value2&#13;
```&#13;
&#13;
### yaml数组&#13;
&#13;
yaml数组用`- `号开头，`:`号后面带**一个**空格&#13;
&#13;
```yaml&#13;
arr: &#13;
 - a&#13;
 - b&#13;
 - c&#13;
```&#13;
&#13;
也可以表示多维数组，需控制层级&#13;
&#13;
```yaml&#13;
array: &#13;
  -&#13;
    - a&#13;
    - b&#13;
    - c&#13;
  -&#13;
    - x&#13;
    - y&#13;
    - z&#13;
```&#13;
&#13;
对象数组，就像java中的`Person p1 = new Person('薛大炮', 18);Person p2 = new Person('蔡徐坤', 26);Person[] persons = new Person[]{p1, p2};`&#13;
&#13;
```yaml&#13;
persons&#13;
  -&#13;
    name: 薛大炮&#13;
    age: 18&#13;
  -&#13;
    name: 蔡徐坤&#13;
    age: 26&#13;
```&#13;
&#13;
### 复合结构&#13;
&#13;
对象和数组可以构成复杂的结构关系&#13;
&#13;
```yaml&#13;
languages: &#13;
  - Java&#13;
  - C++&#13;
  - Go&#13;
WebSites: &#13;
  baidu: https://www.baidu.com&#13;
  google: https:www.google.com&#13;
  bing: https:www.bing.com&#13;
```&#13;
&#13;
对应到json为&#13;
&#13;
```json&#13;
{&#13;
  'languages': ['Java', 'C++', 'Go'],&#13;
  'WebSites': {&#13;
    'baidu': 'https://www.baidu.com',&#13;
    'google': 'https:www.google.com',&#13;
    'bing': 'https:www.bing.com'&#13;
  }&#13;
}&#13;
```&#13;
&#13;
### 纯量&#13;
&#13;
纯量是最基本的，不可再分的值&#13;
- 字符串&#13;
- 整数&#13;
- 浮点数&#13;
- 布尔值&#13;
- null&#13;
- 时间（date）&#13;
- 日期（datetime）&#13;
&#13;
以一个例子来看各纯量的使用&#13;
&#13;
```yaml&#13;
string: &#13;
  - 哈哈            # 字符串可直接写&#13;
  - 'good'         # 或者单引号引表示&#13;
  - '西海岸'        # 或者双引号表示&#13;
  - you jump       # 字符串可写多行，每行被转化为空格即为` you jump i jump！`&#13;
    i jump！&#13;
&#13;
int: &#13;
  - 123&#13;
  - 0100_1101     # 二进制表示&#13;
 &#13;
float: &#13;
  - 66.6&#13;
  - 45.1231402+e5      # 可以使用科学计数法表示&#13;
&#13;
boolean: &#13;
  - TRUE&#13;
  - FALSE&#13;
  - True&#13;
  - False&#13;
  - true&#13;
  - false        # 其实 true false 全小写最常用&#13;
&#13;
null: &#13;
  - a&#13;
  - ~            # 使用~表示null&#13;
&#13;
date: 2024-06-20       # 使用ISO-8601标准：yyyy-MM-dd&#13;
&#13;
datetime: 2024-06-20T16:34:20+09:00     # 使用ISO-8601标准：yyyy-MM-ddTHH:mm:ss+时区&#13;
```&#13;
&#13;
### 引用&#13;
&#13;
`&amp;`表示锚点，`*`表示引用锚点，`&lt;&lt;: `表示合并到当前数据流&#13;
&#13;
```yaml&#13;
database: &amp;database&#13;
  host: 127.0.0.1&#13;
  port: 3306&#13;
  user: root&#13;
  password: 123456&#13;
&#13;
mysql: &#13;
  &lt;&lt;: *database             # 若未生效 则mardown解析器不兼容&#13;
```&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://iamdurant.github.io/post/zhong-shi-yaml.html</guid><pubDate>Thu, 20 Jun 2024 08:45:56 +0000</pubDate></item><item><title>初窥markdown</title><link>https://iamdurant.github.io/post/chu-kui-markdown.html</link><description>### 首先呢，要学会markdown语法，markdown语法非常强大，实在是太酷了，迫不及待要看一看它的语法了！！&#13;
&#13;
### 标题&#13;
&#13;
就标题来说只需在文字前面加上（# ），是的，一个#号加一个空格，后面再跟上标题即可，#号越多 标题越小&#13;
&#13;
### 引用&#13;
&#13;
&gt; 只需在文本开头前加上`&gt; `即可（后面带空格）&#13;
&#13;
### 粗体、斜体、粗体斜体&#13;
&#13;
这是斜体 *哈哈哈哈*  文本块前后各加一个星号&#13;
这是加粗 **呵呵呵呵** 文本块前后各加两个星号&#13;
这是斜体与加粗 ***嘻嘻嘻嘻*** 文本块前后各加三个星号&#13;
&#13;
### 无序列表&#13;
&#13;
无序列表的使用也是相当清晰，就像yaml的数组一样，当然了，控制层级的话只需在前面控制空格数量就好了&#13;
- 苹果&#13;
- 香蕉&#13;
- 蔬菜&#13;
  - 青菜&#13;
  - 白菜&#13;
&#13;
### 有序列表&#13;
&#13;
有序列表只需在数字或者符号后加上`. `即可（后面有空格）,&#13;
1. 科比&#13;
2. 杜兰特&#13;
3. 乔丹&#13;
&#13;
### 链接&#13;
&#13;
链接的格式：`[]()` 方括号里面是文字 圆括号里面是连接地址&#13;
比如：[来吧，now，is movie time！！！](https://nunflix.com)&#13;
&#13;
### 图片&#13;
&#13;
哇哇哇哦，图片就比较刺激了，格式：`![]()`，基于连接，由感叹号开头，方括号里面是文字(在这里是图片描述) 圆括号里面是连接地址&#13;
比如：&#13;
![我的leetcode头像](https://assets.leetcode.cn/aliyun-lc-upload/users/tender-satoshino0/avatar_1692271843.png)&#13;
&#13;
### 分割线&#13;
&#13;
格式：`---` 就是三个减号 三个减号上面还需空一行&#13;
&#13;
---&#13;
&#13;
### 表格&#13;
&#13;
表格就更有意思了，太new了，太潮流了&#13;
&#13;
格式：`|`用来分割，第二行的`:` 用来代表左对齐还是右对齐，或者中间对齐&#13;
&#13;
![表格格式](https://github.com/iamdurant/iamdurant.github.io/assets/107034526/5410dc3a-1e97-426e-b8b5-a629ca4f25d6)&#13;
&#13;
&#13;
| 学号 | 姓名 | 年龄 |&#13;
|     :----------     |    :---     |     :--    |&#13;
|     2020132238     |      蔡徐坤   |      23   |&#13;
|     2020132221     |     薛大炮    |    24     |&#13;
|     2020132249    |     洲饱饱    |      23   |&#13;
&#13;
**上述有我的idol 以及我的两个brother，能被我写进blog，是我的brother的福气**&#13;
&#13;
### 脚注&#13;
&#13;
脚注就比较叼了格式也是基于链接：`[](脚注解释 '脚注名字')`&#13;
&#13;
- [全栈工程师](全栈工程师就是。</description><guid isPermaLink="true">https://iamdurant.github.io/post/chu-kui-markdown.html</guid><pubDate>Wed, 19 Jun 2024 17:43:00 +0000</pubDate></item></channel></rss>